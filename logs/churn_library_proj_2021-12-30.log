root - INFO - Project Customer Churn - Main Library Versioning of Test File:
root - INFO - - Python: 3.9.7 | packaged by conda-forge | (default, Sep 29 2021, 19:20:16) [MSC v.1916 64 bit (AMD64)]
root - INFO - - Pandas: 1.3.4
root - INFO - ===============================
root - INFO - --- Start testing import_data() with file './data/bank_data.csv'
root - INFO - Start to read in file './data/bank_data.csv'.
root - INFO - SUCCESS: the file is not empty and read in.
root - INFO - TEST import_data(): SUCCESS
root - INFO - --- Start testing perform_eda() with file './data/bank_data.csv'
root - INFO - Start to read in file './data/bank_data.csv'.
root - INFO - SUCCESS: the file is not empty and read in.
root - INFO - Start to perform df preprocessing ...
root - INFO - SUCCESS: Read-in dataframe modifications happen successfully.
root - INFO - Preprocessed df is:
 None
root - INFO - Preprocessed df includes no null values:
root - INFO - Customer_Age                0
Sex                         0
Dependent_Count             0
Education_Level             0
Marital_Status              0
Income_Category             0
Card_Category               0
Months_on_book              0
Total_Relationship_Count    0
Months_Inactive_12_mon      0
Contacts_Count_12_mon       0
Credit_Limit                0
Total_Revolving_Bal         0
Avg_Open_To_Buy             0
Total_Amt_Chng_Q4_Q1        0
Total_Trans_Amt             0
Total_Trans_Ct              0
Total_Ct_Chng_Q4_Q1         0
Avg_Utilization_Ratio       0
Churn                       0
dtype: int64
root - INFO - Try to create given directory: ./test/eda/
root - INFO - Start creating the EDA report and .png image plots.
root - INFO - SUCCESS: the file has valid shape: (10127, 20)
root - INFO - SUCCESS: EDA profile report creation and storage happens successfully.
root - INFO - SUCCESS: Successful creation & storage of 'AmountOfChurnersBySex.png'.
root - INFO - SUCCESS: Succesful creation & storage of 'DistributionCustomersAge.png'.
root - INFO - SUCCESS: Successful creation & storage of 'DistributionCustomersMaritalStatus.png'.
root - INFO - SUCCESS: Successful creation & storage of 'DistributionChurnersByFewProps.png'.
root - INFO - SUCCESS: Successful creation & storage of 'DistributionTotalTransactions.png'.
root - INFO - SUCCESS: Successful creation & storage of 'ScatterplotByChurn.png'.
root - INFO - SUCCESS: Successful creation & storage of 'Spearman_FeatCorrelation.png'.
root - INFO - SUCCESS: Successful creation & storage of 'Boxplot_DataTendency.png'.
root - INFO - SUCCESS: EDA part happens successfully.
root - INFO - TEST perform_eda(): SUCCESS
root - INFO - Start to read in file './data/bank_data.csv'.
root - INFO - SUCCESS: the file is not empty and read in.
root - INFO - Start to perform df preprocessing ...
root - INFO - SUCCESS: Read-in dataframe modifications happen successfully.
root - INFO - Preprocessed df is:
 None
root - INFO - Preprocessed df includes no null values:
root - INFO - Customer_Age                0
Sex                         0
Dependent_Count             0
Education_Level             0
Marital_Status              0
Income_Category             0
Card_Category               0
Months_on_book              0
Total_Relationship_Count    0
Months_Inactive_12_mon      0
Contacts_Count_12_mon       0
Credit_Limit                0
Total_Revolving_Bal         0
Avg_Open_To_Buy             0
Total_Amt_Chng_Q4_Q1        0
Total_Trans_Amt             0
Total_Trans_Ct              0
Total_Ct_Chng_Q4_Q1         0
Avg_Utilization_Ratio       0
Churn                       0
dtype: int64
root - INFO - --- Start testing encoder_helper() with bank dataframe.
root - INFO - SUCCESS: Check of amount of categorical items > 0: '5'.
root - INFO - SUCCESS: All list elements are categorical, non-empty items.
root - INFO - SUCCESS: Dataframe is not empty.
root - INFO - SUCCESS: Check of amount of categorical items: '5'.
root - INFO - SUCCESS: All list elements are categorical items.
root - INFO - SUCCESS: dataframe is not empty, shape: (10127, 20).
root - INFO - Start to perform categorical feature encoding ...
root - INFO - SUCCESS: Proportion of churn encoding for item: Sex
root - INFO - SUCCESS: Proportion of churn encoding for item: Education_Level
root - INFO - SUCCESS: Proportion of churn encoding for item: Marital_Status
root - INFO - SUCCESS: Proportion of churn encoding for item: Income_Category
root - INFO - SUCCESS: Proportion of churn encoding for item: Card_Category
root - INFO - SUCCESS: Whole encoding of categorical features happens successfully.
root - INFO - SUCCESS: Original & encoded df have same shape, datatypes no, correct labels.
root - INFO - TEST encoder_helper(): SUCCESS with correct categorical list.
root - INFO - SUCCESS: Check of amount of categorical items > 0: '3'.
root - INFO - SUCCESS: List elements are a mixture of categorical & non- categorical items.
root - INFO - SUCCESS: Check of amount of categorical items: '3'.
root - ERROR - ERROR: df and/or categorical_lst are empty or include wrong types.
root - INFO - SUCCESS: Wrong categorical encoder_helper test fails as expected: Not all items are categorical strings.
root - INFO - Start to read in file './data/bank_data.csv'.
root - INFO - SUCCESS: the file is not empty and read in.
root - INFO - Start to perform df preprocessing ...
root - INFO - SUCCESS: Read-in dataframe modifications happen successfully.
root - INFO - Preprocessed df is:
 None
root - INFO - Preprocessed df includes no null values:
root - INFO - Customer_Age                0
Sex                         0
Dependent_Count             0
Education_Level             0
Marital_Status              0
Income_Category             0
Card_Category               0
Months_on_book              0
Total_Relationship_Count    0
Months_Inactive_12_mon      0
Contacts_Count_12_mon       0
Credit_Limit                0
Total_Revolving_Bal         0
Avg_Open_To_Buy             0
Total_Amt_Chng_Q4_Q1        0
Total_Trans_Amt             0
Total_Trans_Ct              0
Total_Ct_Chng_Q4_Q1         0
Avg_Utilization_Ratio       0
Churn                       0
dtype: int64
root - INFO - --- Start testing perform_feature_engineering() with bank dataframe.
root - INFO - Start to perform feature engineering ...
root - INFO - Class distribution about churn in the training set is: Counter({0: 5957, 1: 1131})
root - INFO - Target label class of the training includes '5957' identified non-churn customers.
root - INFO - Target label class of the training includes '1131' identified churn customers.
root - INFO - SUCCESS: perform df feature engineering for model handling happens successfully.
root - INFO - TEST perform_feature_engineering(): SUCCESS
root - INFO - Start to read in file './data/bank_data.csv'.
root - INFO - SUCCESS: the file is not empty and read in.
root - INFO - Start to perform df preprocessing ...
root - INFO - SUCCESS: Read-in dataframe modifications happen successfully.
root - INFO - Preprocessed df is:
 None
root - INFO - Preprocessed df includes no null values:
root - INFO - Customer_Age                0
Sex                         0
Dependent_Count             0
Education_Level             0
Marital_Status              0
Income_Category             0
Card_Category               0
Months_on_book              0
Total_Relationship_Count    0
Months_Inactive_12_mon      0
Contacts_Count_12_mon       0
Credit_Limit                0
Total_Revolving_Bal         0
Avg_Open_To_Buy             0
Total_Amt_Chng_Q4_Q1        0
Total_Trans_Amt             0
Total_Trans_Ct              0
Total_Ct_Chng_Q4_Q1         0
Avg_Utilization_Ratio       0
Churn                       0
dtype: int64
root - INFO - SUCCESS: Check of amount of categorical items: '5'.
root - INFO - SUCCESS: All list elements are categorical items.
root - INFO - SUCCESS: dataframe is not empty, shape: (10127, 20).
root - INFO - Start to perform categorical feature encoding ...
root - INFO - SUCCESS: Proportion of churn encoding for item: Sex
root - INFO - SUCCESS: Proportion of churn encoding for item: Education_Level
root - INFO - SUCCESS: Proportion of churn encoding for item: Marital_Status
root - INFO - SUCCESS: Proportion of churn encoding for item: Income_Category
root - INFO - SUCCESS: Proportion of churn encoding for item: Card_Category
root - INFO - SUCCESS: Whole encoding of categorical features happens successfully.
root - INFO - Start to perform feature engineering ...
root - INFO - Class distribution about churn in the training set is: Counter({0: 5957, 1: 1131})
root - INFO - Target label class of the training includes '5957' identified non-churn customers.
root - INFO - Target label class of the training includes '1131' identified churn customers.
root - INFO - SUCCESS: perform df feature engineering for model handling happens successfully.
root - INFO - --- Start testing train_models() with bank dataframe.
root - INFO - Start with model trainings ...
root - INFO - Start to train LogisticRegression Classifier ...
root - INFO - --- X_train for log regression GridSearchCV fit and predict:       Customer_Age  Dependent_Count  ...  Income_Category_Churn  Card_Category_Churn
415             49                2  ...               0.134807             0.160979
3749            61                0  ...               0.168165             0.160979
9295            27                0  ...               0.157655             0.147748
8290            52                1  ...               0.171862             0.160979
7672            44                3  ...               0.171862             0.160979
...            ...              ...  ...                    ...                  ...
5734            44                1  ...               0.151397             0.160979
5191            53                3  ...               0.168165             0.160979
5390            42                4  ...               0.171862             0.160979
860             40                3  ...               0.151397             0.160979
7270            53                4  ...               0.134807             0.160979

[7088 rows x 19 columns]
root - INFO - --- X_test for CV best testimator predict:       Customer_Age  Dependent_Count  ...  Income_Category_Churn  Card_Category_Churn
3781            48                3  ...               0.171862             0.160979
2922            59                1  ...               0.171862             0.160979
5070            37                2  ...               0.171862             0.160979
7246            47                3  ...               0.151397             0.160979
623             42                3  ...               0.157655             0.160979
...            ...              ...  ...                    ...                  ...
6621            49                4  ...               0.134807             0.160979
9535            39                1  ...               0.134807             0.181034
4638            56                2  ...               0.157655             0.160979
1166            38                2  ...               0.171862             0.160979
254             70                0  ...               0.171862             0.160979

[3039 rows x 19 columns]
root - INFO - Save model: Pipeline(steps=[('rscaler', RobustScaler(quantile_range=(25, 75))),
                ('logreg', LogisticRegression(C=1))])
root - INFO - SUCCESS: storage of model 'lr' as pickle file happens successfully.
root - INFO - ---  LogisticRegression Classifier CV best estimator ---
root - INFO - LogisticRegression(C=1)
root - INFO - ------------------------------------------------------
root - INFO - ---  LogisticRegression CV report results (single model)  ---
root - INFO - test results
root - INFO -               precision    recall  f1-score   support

           0       0.92      0.97      0.94      2543
           1       0.77      0.55      0.64       496

    accuracy                           0.90      3039
   macro avg       0.84      0.76      0.79      3039
weighted avg       0.89      0.90      0.89      3039

root - INFO - 
train results
root - INFO -               precision    recall  f1-score   support

           0       0.92      0.97      0.94      5957
           1       0.77      0.58      0.66      1131

    accuracy                           0.91      7088
   macro avg       0.85      0.77      0.80      7088
weighted avg       0.90      0.91      0.90      7088

root - INFO - ------------------------------------------------------
root - INFO - SUCCESS: Training of logistic regression classifier model happens successfully.
root - INFO - Start to train RandomForestClassifier ...
root - INFO - Save model: Pipeline(steps=[('rscaler', RobustScaler(quantile_range=(25, 75))),
                ('rforest',
                 RandomForestClassifier(criterion='entropy', max_depth=10,
                                        n_estimators=800, random_state=42))])
root - INFO - SUCCESS: storage of model 'rfc' as pickle file happens successfully.
root - INFO - ---  RandomForestClassifier CV best estimator ---
root - INFO - RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=800,
                       random_state=42)
root - INFO - ------------------------------------------------------
root - INFO - ---  RandomForestClassifier CV report results (ensemble model)  ---
root - INFO - test results
root - INFO -               precision    recall  f1-score   support

           0       0.96      0.99      0.97      2543
           1       0.94      0.77      0.85       496

    accuracy                           0.95      3039
   macro avg       0.95      0.88      0.91      3039
weighted avg       0.95      0.95      0.95      3039

root - INFO - 
train results
root - INFO -               precision    recall  f1-score   support

           0       0.99      1.00      0.99      5957
           1       0.99      0.95      0.97      1131

    accuracy                           0.99      7088
   macro avg       0.99      0.97      0.98      7088
weighted avg       0.99      0.99      0.99      7088

root - INFO - ------------------------------------------------------
root - INFO - SUCCESS: Training of RandomForestClassifier model happens successfully.
root - INFO - Start to train XGBClassifier ...
root - INFO - Save model: Pipeline(steps=[('rscaler', RobustScaler(quantile_range=(25, 75))),
                ('xgbc',
                 XGBClassifier(base_score=0.5, booster='gbtree',
                               colsample_bylevel=1, colsample_bynode=1,
                               colsample_bytree=0.8, enable_categorical=False,
                               eval_metric='logloss', gamma=0, gpu_id=-1,
                               importance_type=None, interaction_constraints='',
                               learning_rate=0.05, max_delta_step=0,
                               max_depth=5, min_child_weight=2, missing=nan,
                               monotone_constraints='()', n_estimators=600,
                               n_jobs=4, num_parallel_tree=1, predictor='auto',
                               random_state=24, reg_alpha=0, reg_lambda=1.1,
                               scale_pos_weight=5.267020335985853,
                               subsample=0.8, tree_method='exact',
                               use_label_encoder=False, validate_parameters=1,
                               verbosity=0))])
root - INFO - SUCCESS: storage of model 'xgbc' as pickle file happens successfully.
root - INFO - ---  XGBClassifier CV best estimator ---
root - INFO - XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,
              colsample_bynode=1, colsample_bytree=0.8,
              enable_categorical=False, eval_metric='logloss', gamma=0,
              gpu_id=-1, importance_type=None, interaction_constraints='',
              learning_rate=0.05, max_delta_step=0, max_depth=5,
              min_child_weight=2, missing=nan, monotone_constraints='()',
              n_estimators=600, n_jobs=4, num_parallel_tree=1, predictor='auto',
              random_state=24, reg_alpha=0, reg_lambda=1.1,
              scale_pos_weight=5.267020335985853, subsample=0.8,
              tree_method='exact', use_label_encoder=False,
              validate_parameters=1, verbosity=0)
root - INFO - ------------------------------------------------------
root - INFO - ---  XGBClassifier CV report results (ensemble model)  ---
root - INFO - test results
root - INFO -               precision    recall  f1-score   support

           0       0.99      0.97      0.98      2543
           1       0.87      0.93      0.90       496

    accuracy                           0.97      3039
   macro avg       0.93      0.95      0.94      3039
weighted avg       0.97      0.97      0.97      3039

root - INFO - 
train results
root - INFO -               precision    recall  f1-score   support

           0       1.00      1.00      1.00      5957
           1       0.99      1.00      1.00      1131

    accuracy                           1.00      7088
   macro avg       1.00      1.00      1.00      7088
weighted avg       1.00      1.00      1.00      7088

root - INFO - ------------------------------------------------------
root - INFO - SUCCESS: Training of xgb classifier model happens successfully.
root - INFO - SUCCESS: Successful train models & store best classifiers and scores.
root - INFO - TEST train_models(): SUCCESS
